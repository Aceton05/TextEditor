import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author info
 */
public class Edit extends javax.swing.JFrame {

    /**
     * Creates new form Edit
     */
    public Edit() {
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fContent = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        tfZeile = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        tfSpalte = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfZeichen = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taMeldungen = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        taText = new javax.swing.JTextArea();
        btSuchen = new javax.swing.JButton();
        tfSuchen = new javax.swing.JTextField();
        tfErsetzen = new javax.swing.JTextField();
        btErsetzen = new javax.swing.JButton();
        btSonderzeichen = new javax.swing.JButton();
        meBar = new javax.swing.JMenuBar();
        meDatei = new javax.swing.JMenu();
        miOeffnen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miSpeichern = new javax.swing.JMenuItem();
        miSpeichernUnter = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        meEinstellungen = new javax.swing.JMenu();
        meDarkmode = new javax.swing.JCheckBoxMenuItem();
        miBeenden = new javax.swing.JMenuItem();
        meHilfe = new javax.swing.JMenu();
        miInfo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TextEditor");

        tfZeile.setText("0");
        tfZeile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfZeileActionPerformed(evt);
            }
        });

        jLabel1.setText("Zeile:");

        tfSpalte.setText("0");
        tfSpalte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSpalteActionPerformed(evt);
            }
        });

        jLabel2.setText("Spalte:");

        tfZeichen.setText("0");
        tfZeichen.setPreferredSize(new java.awt.Dimension(63, 23));
        tfZeichen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfZeichenActionPerformed(evt);
            }
        });

        jLabel3.setText("Zeichen:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfZeile)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSpalte)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfZeichen, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addContainerGap(319, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfZeile, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(tfSpalte)
                    .addComponent(jLabel2)
                    .addComponent(tfZeichen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3))
                .addContainerGap())
        );

        taMeldungen.setEditable(false);
        taMeldungen.setColumns(20);
        taMeldungen.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        taMeldungen.setRows(5);
        jScrollPane2.setViewportView(taMeldungen);

        taText.setColumns(20);
        taText.setRows(5);
        taText.setText("Ein Text zum suchen.");
        taText.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                taTextCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(taText);

        btSuchen.setText("Suchen");
        btSuchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuchenActionPerformed(evt);
            }
        });

        tfSuchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfSuchenActionPerformed(evt);
            }
        });

        tfErsetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfErsetzenActionPerformed(evt);
            }
        });

        btErsetzen.setText("Ersetzen");
        btErsetzen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btErsetzenActionPerformed(evt);
            }
        });

        btSonderzeichen.setText("Sonderzeichen Hinzuf√ºgen");
        btSonderzeichen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSonderzeichenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fContentLayout = new javax.swing.GroupLayout(fContent);
        fContent.setLayout(fContentLayout);
        fContentLayout.setHorizontalGroup(
            fContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(fContentLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tfSuchen)
                                .addComponent(btSuchen, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                                .addComponent(tfErsetzen))
                            .addComponent(btErsetzen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btSonderzeichen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)))
                .addContainerGap())
        );
        fContentLayout.setVerticalGroup(
            fContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fContentLayout.createSequentialGroup()
                .addGroup(fContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fContentLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(tfSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfErsetzen, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btErsetzen, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btSonderzeichen, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE))
                    .addGroup(fContentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        meDatei.setText("Datei");

        miOeffnen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miOeffnen.setBackground(getBackground());
        miOeffnen.setForeground(getForeground());
        miOeffnen.setText("√ñffnen");
        miOeffnen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOeffnenActionPerformed(evt);
            }
        });
        meDatei.add(miOeffnen);
        meDatei.add(jSeparator1);

        miSpeichern.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSpeichern.setText("Speichern");
        miSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSpeichernActionPerformed(evt);
            }
        });
        meDatei.add(miSpeichern);

        miSpeichernUnter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miSpeichernUnter.setText("Speichern unter");
        meDatei.add(miSpeichernUnter);
        meDatei.add(jSeparator2);

        meEinstellungen.setText("Einstelungen");

        meDarkmode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        meDarkmode.setSelected(true);
        meDarkmode.setText("Dark Mode");
        meDarkmode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meDarkmodeActionPerformed(evt);
            }
        });
        meEinstellungen.add(meDarkmode);

        meDatei.add(meEinstellungen);

        miBeenden.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miBeenden.setText("Beenden");
        miBeenden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBeendenActionPerformed(evt);
            }
        });
        meDatei.add(miBeenden);

        meBar.add(meDatei);

        meHilfe.setText("Hilfe");

        miInfo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        miInfo.setText("Info");
        miInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miInfoActionPerformed(evt);
            }
        });
        meHilfe.add(miInfo);

        meBar.add(meHilfe);

        setJMenuBar(meBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() { 
        sonderzeichenDialog = new SonderzeichenDialog(this);
        darkmode();
        taText.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));
    }
    
    private void btSuchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuchenActionPerformed
        suchen();
    }//GEN-LAST:event_btSuchenActionPerformed

    private void miOeffnenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOeffnenActionPerformed
        laden();               
    }//GEN-LAST:event_miOeffnenActionPerformed

    private void tfZeileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfZeileActionPerformed
        cursorZuZeile();       
    }//GEN-LAST:event_tfZeileActionPerformed

    private void tfSpalteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSpalteActionPerformed
        cursorZuSpalte();       
    }//GEN-LAST:event_tfSpalteActionPerformed

    private void taTextCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_taTextCaretUpdate
        zeigeCursorPosition();        
    }//GEN-LAST:event_taTextCaretUpdate

    private void meDarkmodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meDarkmodeActionPerformed
       darkmode();       
    }//GEN-LAST:event_meDarkmodeActionPerformed

    private void tfZeichenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfZeichenActionPerformed
        cursorZuZeichen(); 
    }//GEN-LAST:event_tfZeichenActionPerformed

    private void btErsetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btErsetzenActionPerformed
        ersetzen();
    }//GEN-LAST:event_btErsetzenActionPerformed

    private void tfSuchenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfSuchenActionPerformed
        suchen();
    }//GEN-LAST:event_tfSuchenActionPerformed

    private void tfErsetzenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfErsetzenActionPerformed
       ersetzen();
    }//GEN-LAST:event_tfErsetzenActionPerformed

    private void miSpeichernActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSpeichernActionPerformed
        speichern();
    }//GEN-LAST:event_miSpeichernActionPerformed

    private void miBeendenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBeendenActionPerformed
        schlie√üen();
    }//GEN-LAST:event_miBeendenActionPerformed

    private void btSonderzeichenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSonderzeichenActionPerformed
        sonderzeichenEinf√ºgen();
    }//GEN-LAST:event_btSonderzeichenActionPerformed

    private void miInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miInfoActionPerformed
        JEditorPane textArea = new JEditorPane("text/html",lizens);        
        textArea.setEditable(false);
        textArea.setPreferredSize(new Dimension( 510, 400 ));        
        JOptionPane.showMessageDialog(this,textArea,"Program Info",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_miInfoActionPerformed

    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Edit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Edit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btErsetzen;
    private javax.swing.JButton btSonderzeichen;
    private javax.swing.JButton btSuchen;
    private javax.swing.JPanel fContent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar meBar;
    private javax.swing.JCheckBoxMenuItem meDarkmode;
    private javax.swing.JMenu meDatei;
    private javax.swing.JMenu meEinstellungen;
    private javax.swing.JMenu meHilfe;
    private javax.swing.JMenuItem miBeenden;
    private javax.swing.JMenuItem miInfo;
    private javax.swing.JMenuItem miOeffnen;
    private javax.swing.JMenuItem miSpeichern;
    private javax.swing.JMenuItem miSpeichernUnter;
    private javax.swing.JTextArea taMeldungen;
    private javax.swing.JTextArea taText;
    private javax.swing.JTextField tfErsetzen;
    private javax.swing.JTextField tfSpalte;
    private javax.swing.JTextField tfSuchen;
    private javax.swing.JTextField tfZeichen;
    private javax.swing.JTextField tfZeile;
    // End of variables declaration//GEN-END:variables
    private SonderzeichenDialog sonderzeichenDialog;
    private void laden() {
       JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Dateien", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        try{
        if(returnVal == JFileChooser.APPROVE_OPTION){
           File selected = chooser.getSelectedFile();
           taText.setText(Files.readString(selected.toPath()));
           setTitle("TextEditor - "+selected.getName());
        }
        } catch (IOException e){
          taMeldungen.setText(e.getMessage());
        } 
        zeigeCursorPosition();
    }
    private void speichern() {
        //TODO
       JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Dateien", "txt");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        try{
        if(returnVal == JFileChooser.APPROVE_OPTION){
           File selected = chooser.getSelectedFile();           
           Files.writeString(selected.toPath(), taText.getText());
        }
        } catch (IOException e){
          taMeldungen.setText(e.getMessage());
        } 
    }
    private void schlie√üen() {
       System.exit(0);
    }
    private void sonderzeichenEinf√ºgen(){
        sonderzeichenDialog.showDialog();
        int cPos = taText.getCaretPosition();
        String text =taText.getText();
        char addChar = sonderzeichenDialog.getChar();
        taText.setText(addChar(text,addChar,cPos));
    }
    private void cursorZuZeile() {
         try{
        int lineNumber =Integer.parseInt( tfZeile.getText());
        int columnNumber = Integer.parseInt(tfSpalte.getText()); 
        int ofset =taText.getLineStartOffset(lineNumber)-1;
        int cPos = ofset+columnNumber;
        tfZeichen.setText(String.valueOf(cPos)); 
        taText.requestFocusInWindow();
        taText.setCaretPosition(cPos);  
         } catch (BadLocationException e) {
             taMeldungen.setText(e.getMessage());
        } 
    }
    private void cursorZuSpalte() {
        try{
        int lineNumber =Integer.parseInt( tfZeile.getText());
        System.out.println(lineNumber);
        int columnNumber = Integer.parseInt(tfSpalte.getText()); 
        System.out.println(columnNumber);
        int ofset =taText.getLineStartOffset(lineNumber)-1;
        System.out.println(ofset);
        int cPos = ofset+columnNumber;
        tfZeichen.setText(String.valueOf(cPos)); 
        taText.requestFocusInWindow();
        taText.setCaretPosition(cPos);  
         } catch (BadLocationException e) {
             taMeldungen.setText(e.getMessage());
        } 
    }
    private void cursorZuZeichen() {
        try{
        int cPos = Integer.parseInt(tfZeichen.getText());
        
        tfZeichen.setText(String.valueOf(cPos)); 
       int lineNumber = taText.getLineOfOffset(cPos); // beginnt bei 0
       int startOffset = taText.getLineStartOffset(lineNumber);
       String str = taText.getText(startOffset, (cPos - startOffset));
       int len = str.length();         
       tfZeile.setText(String.valueOf(lineNumber+1));
       tfSpalte.setText(String.valueOf(len));
       taText.requestFocusInWindow();
       taText.setCaretPosition(cPos);          
       } catch (BadLocationException e) {
             taMeldungen.setText(e.getMessage());
        } 
    }
    private void zeigeCursorPosition() {
        try{
        int cPos = taText.getCaretPosition();
        tfZeichen.setText(String.valueOf(cPos)); 
       int lineNumber = taText.getLineOfOffset(cPos);
       int startOffset = taText.getLineStartOffset(lineNumber);
       String str = taText.getText(startOffset, (cPos - startOffset));
       int len = str.length();         
       tfZeile.setText(String.valueOf(lineNumber+1));
       tfSpalte.setText(String.valueOf(len));       
       } catch (BadLocationException e) {
             taMeldungen.setText(e.getMessage());
        } 
    }
    private void darkmode() {
         Color background;
       Color forground;
        if(meDarkmode.isSelected()){
           background=(Color.DARK_GRAY);
           forground=(Color.white);           
       }else{
           background=(Color.white);
           forground=(Color.black);            
       }
       fContent.setBackground(background);
       fContent.setForeground(forground);         
       Component[] children = fContent.getComponents();
       setColorOfComponents(children,background,forground);
       taMeldungen.setBackground(Color.LIGHT_GRAY);
       taMeldungen.setForeground(Color.RED);
    }
    private void suchen() {
        taText.requestFocusInWindow();
        String suche = tfSuchen.getText().toLowerCase();
        String text = taText.getText().toLowerCase();
        int caretPos = taText.getCaretPosition();
        if(caretPos==text.length())
            caretPos=0;
        int pos = text.indexOf(suche, caretPos);
        if (pos < 0) {
            taMeldungen.setText("'" + suche + "' nicht gefunden. Position: "+caretPos +"L√§nge:" + text.length());
        } else {
            taText.select(pos, pos + suche.length());
        }
        taText.requestFocusInWindow();
    }
    private void ersetzen() {
        taText.requestFocusInWindow();
        String suche = tfSuchen.getText().toLowerCase();
        String ersetzte = tfErsetzen.getText().toLowerCase();
        String text = taText.getText().toLowerCase();
        int caretPos = taText.getCaretPosition();
        if(caretPos==text.length())
            caretPos=0;
        int pos = text.indexOf(suche, caretPos);
        if (pos < 0) {
            taMeldungen.setText("'" + suche + "' nicht gefunden. Position: "+caretPos +"L√§nge:" + text.length());
        } else {
            taText.select(pos, pos + suche.length());
            taText.replaceRange(ersetzte,pos, pos + suche.length());
            taText.select(pos, pos + ersetzte.length());
        }
        taText.requestFocusInWindow();
    }
    private void setColorOfComponents(Component[] children,Color background,Color forground){
        for(Component child :children){
                System.out.println(child.getClass().toString());
                child.setBackground(background);
                child.setForeground(forground);
                if(child instanceof JPanel){
                    Component[] childrenOfJPanel = ((JPanel)child).getComponents();
                    setColorOfComponents(childrenOfJPanel,background,forground);
                }
                else if(child instanceof JScrollPane){
                    Component[] childrenOfJPanel = ((JScrollPane)child).getComponents();
                     setColorOfComponents(childrenOfJPanel,background,forground);
                     
                }
                else if(child instanceof JViewport){
                    Component[] childrenOfJPanel = ((JViewport)child).getComponents();
                     setColorOfComponents(childrenOfJPanel,background,forground);
                }                
        }
    }
    
    	/**
 	* Liest eine Textdatei zeilenweise in ein String-Array ein.
 	*
 	* @param fullPath Pfad auf die Textdatei
 	* @return Feld aus den Zeilen der Textdatei
 	*/
	public static String[] readTextFile(String fullPath) {
    	String[] lines = {};
    	Path path = new File(fullPath).toPath();

    	try {
        	lines = Files.readAllLines(path).toArray(lines);
    	} catch (IOException ex) {
        	System.err.println(ex + "\nCan't read file " + fullPath);
    	}
    	return lines;
	}
        
        	/**
 	* Schreibt ein Feld aus Zeichenketten in eine Textdatei. Falls die Datei
 	* schon vorhanden ist, wird sie ueberschrieben.
 	*
 	* @param fullPath Pfadname auf die Textdatei
 	* @param lines Zeichenketten die geschrieben werde
 	* @return true, wenn der Schreibvorgang erfolgreich war
 	*/
	public static boolean writeTextFile(String fullPath, String[] lines) {
    	boolean ok = true;
    	try (BufferedWriter bw = new BufferedWriter(new FileWriter(fullPath))) {
        	for (String line : lines) {
            	bw.write(line);
            	bw.write("\n");
        	}
    	} catch (IOException ex) {
        	System.err.println(ex + "\nCan't write file " + fullPath);
        	ok = false;
    	}
    	return ok;
	}
        public String addChar(String str, char ch, int position) {
            int len = str.length();
            char[] updatedArr = new char[len + 1];
            str.getChars(0, position, updatedArr, 0);
            updatedArr[position] = ch;
            str.getChars(position, len, updatedArr, position + 1);
            return new String(updatedArr);
        }
        private String lizens="<center><p>Simple text editor with search and replace funktion. Only support for German language but has DarkMode"
                + "as an extra Feature.<br> " +
"    <b>Copyright <sup>\u00A9</sup> 2022</b>  <a href=\"mailto:Michael.K√∂hler@udo.edu\">Aceton05, Michael.K√∂hler@udo.edu</a></p>" +
"\n" +
"    <p>This program is free software: you can redistribute it and/or modify\n" +
"    it under the terms of the <b>GNU General Public License</b> as published by\n" +
"    the Free Software Foundation, either version 3 of the License, or\n" +
"    (at your option) any later version.</p>\n" +
"    <p>This program is distributed in the hope that it will be useful,\n" +
"    but WITHOUT ANY WARRANTY; without even the implied warranty of\n" +
"    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n" +
"    GNU General Public License for more details.</p>\n" +
"    You should have received a copy of the GNU General Public License\n" +
"    along with this program.  If not, see "+
"<a href=https://www.gnu.org/licenses/>https://www.gnu.org/licenses/</a>.\n" +
"\n" +
"You can find the repositorie at <a href=https://github.com/Aceton05/TextEditor>https://github.com/Aceton05/TextEditor</a></center>\n";
}
